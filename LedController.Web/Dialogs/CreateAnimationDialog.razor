@using MudBlazor
@using Microsoft.AspNetCore.Components
@using Animation = LedController.Domain.Models.Animation
@using Microsoft.Extensions.Logging
@using LedController.WebPortal.Domain.Managers
@using LedController.WebPortal.Domain.Services

@inject ILogger<CreateAnimationDialog> _logger
@inject IAnimationManger _animationManger
@inject IAnimationService _animationService


<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.DeleteForever" Class="mr-3 mb-n1" />
            Delete server?
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField T="string" @bind-Text="AnimationName" Placeholder="Animation Name"></MudTextField>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Success" @onclick="async () => await CreateAnimationAsync()">Add EffectDefinition</MudButton>
    </DialogActions>
</MudDialog>


@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }


    public string AnimationName { get; set; }

    [Parameter]
    public Animation Animation { get; set; } = default;


    /// <summary>
    /// Method invoked when the component is ready to start, having received its
    /// initial parameters from its parent in the render tree.
    /// Override this method if you will perform an asynchronous operation and
    /// want the component to refresh when that operation is completed.
    /// </summary>
    /// <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing any asynchronous operation.</returns>
    protected override Task OnInitializedAsync()
    {
        if (Animation != default)
        {
            AnimationName = $"{Animation.Name}-copy";
        }


        return base.OnInitializedAsync();
    }


    private void Cancel()
    {
        MudDialog.Close(DialogResult.Cancel());
    }


    public async Task CreateAnimationAsync()
    {
        Animation newAnimation;

        if (Animation != default)
        {
	        newAnimation = _animationService.CopyAnimation(Animation, AnimationName);
        }
        else
        {
	        newAnimation = new Animation(AnimationName);
        }

	    await _animationManger.Add(newAnimation);
	    
	    MudDialog.Close(DialogResult.Ok(true));
    }

}
